{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\photogram\\\\src\\\\components\\\\chat\\\\ChatMessage.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Container } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport InputEmoji from \"react-input-emoji\";\nimport \"./chatMessage.css\";\nimport firebase from \"firebase\";\nimport ChatShow from \"./ChatShow\";\nimport { profileUser } from \"../../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatMessage({\n  activeUser,\n  friendUser,\n  user_uid\n}) {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [chat, setChat] = useState(null);\n  const [isChatFriend, setIsChatFriend] = useState(false);\n  useEffect(() => {\n    async function getThisUserChat(chatId) {\n      // console.log(postId);\n      const response = await firebase.firestore().collection(\"chat\").doc(\"allchatCollection\").collection(chatId).orderBy('timeStamp', 'desc');\n      await response.onSnapshot(snapshot => {\n        setChat(snapshot.docs.map(doc => ({\n          id: doc.id,\n          data: doc.data()\n        })));\n      });\n    }\n\n    if (user_uid && activeUser && friendUser) {\n      if (activeUser.chat_friends.includes(user_uid)) {\n        getThisUserChat(activeUser.chatUrl[user_uid]);\n        setIsChatFriend(true);\n      }\n    }\n  }, [user_uid, isChatFriend]);\n\n  async function handleOnEnter() {\n    // console.log(text);\n    if (isChatFriend) {\n      await firebase.firestore().collection(\"chat\").doc(\"allchatCollection\").collection(activeUser.chatUrl[user_uid]).add({\n        message_sender: activeUser.username,\n        message: text,\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n        message_sender_uid: activeUser.userId,\n        senderpic: activeUser.profile_photo\n      });\n    } else {\n      let chat_id = activeUser.userId + friendUser.userId;\n      let messageUrl = activeUser.chatUrl;\n      messageUrl[user_uid] = chat_id;\n      let messageUrlOne = friendUser.chatUrl;\n      messageUrlOne[activeUser.userId] = chat_id;\n      await firebase.firestore().collection(\"users\").doc(activeUser.docId).update({\n        chat_friends: [...activeUser.chat_friends, user_uid]\n      });\n      await firebase.firestore().collection(\"users\").doc(activeUser.docId).update({\n        chatUrl: messageUrl\n      });\n      await firebase.firestore().collection(\"users\").doc(friendUser.docId).update({\n        chat_friends: [...friendUser.chat_friends, activeUser.userId]\n      });\n      await firebase.firestore().collection(\"users\").doc(friendUser.docId).update({\n        chatUrl: messageUrlOne\n      });\n      await firebase.firestore().collection(\"chat\").doc(\"allchatCollection\").collection(chat_id).add({\n        message_sender: activeUser.username,\n        message: text,\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n        message_sender_uid: activeUser.userId,\n        senderpic: activeUser.profile_photo\n      });\n      setIsChatFriend(true);\n      window.location.reload();\n    }\n  }\n\n  console.log(chat);\n  return activeUser && friendUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatMessage\",\n    style: {\n      overflow: 'scroll',\n      height: '70vh'\n    },\n    children: [chat ? chat.map(chat => /*#__PURE__*/_jsxDEV(ChatShow, {\n      chat: chat.data,\n      activeUser: activeUser\n    }, chat.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatMessageInput\",\n      style: {\n        display: \"flex\",\n        // marginTop: \"auto\",\n        position: \"absolute\",\n        bottom: -5,\n        width: \"67%\",\n        objectFit: \"contain\",\n        backgroundColor: \"#f5f4f2\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputEmoji, {\n        value: text,\n        onChange: setText,\n        cleanOnEnter: true,\n        onEnter: handleOnEnter,\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleOnEnter,\n        disabled: !text.trim(),\n        children: [\" \", \"Send\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatMessage, \"JdKl+Q4EFd7dK+g5NLRTQHBVz2A=\");\n\n_c = ChatMessage;\nexport default ChatMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessage\");","map":{"version":3,"sources":["G:/projects/photogram/src/components/chat/ChatMessage.js"],"names":["Button","Container","React","useState","useEffect","InputEmoji","firebase","ChatShow","profileUser","ChatMessage","activeUser","friendUser","user_uid","text","setText","chat","setChat","isChatFriend","setIsChatFriend","getThisUserChat","chatId","response","firestore","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","data","chat_friends","includes","chatUrl","handleOnEnter","add","message_sender","username","message","timeStamp","FieldValue","serverTimestamp","message_sender_uid","userId","senderpic","profile_photo","chat_id","messageUrl","messageUrlOne","docId","update","window","location","reload","console","log","overflow","height","display","position","bottom","width","objectFit","backgroundColor","trim"],"mappings":"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","sourcesContent":["import { Button, Container } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport \"./chatMessage.css\";\r\nimport firebase from \"firebase\";\r\nimport ChatShow from \"./ChatShow\";\r\nimport { profileUser } from \"../../services/firebase\";\r\n\r\nfunction ChatMessage({ activeUser, friendUser, user_uid }) {\r\n  const [text, setText] = useState(\"\");\r\n  const [chat, setChat] = useState(null);\r\n  const [isChatFriend, setIsChatFriend] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function getThisUserChat(chatId) {\r\n      // console.log(postId);\r\n      const response = await firebase\r\n        .firestore()\r\n        .collection(\"chat\")\r\n        .doc(\"allchatCollection\")\r\n        .collection(chatId).orderBy('timeStamp','desc')\r\n\r\n   \r\n\r\n      await response.onSnapshot((snapshot) => {\r\n        setChat(\r\n          snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            data: doc.data(),\r\n          }))\r\n        );\r\n      });\r\n    }\r\n\r\n    if (user_uid && activeUser && friendUser) {\r\n      if (activeUser.chat_friends.includes(user_uid)) {\r\n        getThisUserChat(activeUser.chatUrl[user_uid]);\r\n        setIsChatFriend(true);\r\n      }\r\n    }\r\n  }, [user_uid, isChatFriend]);\r\n\r\n  async function handleOnEnter() {\r\n    // console.log(text);\r\n\r\n    if (isChatFriend) {\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"chat\")\r\n        .doc(\"allchatCollection\")\r\n        .collection(activeUser.chatUrl[user_uid])\r\n\r\n        .add({\r\n          message_sender: activeUser.username,\r\n          message: text,\r\n          timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message_sender_uid: activeUser.userId,\r\n          senderpic: activeUser.profile_photo,\r\n        });\r\n    } else {\r\n      let chat_id = activeUser.userId + friendUser.userId;\r\n      let messageUrl = activeUser.chatUrl;\r\n      messageUrl[user_uid] = chat_id;\r\n\r\n      let messageUrlOne = friendUser.chatUrl;\r\n      messageUrlOne[activeUser.userId] = chat_id;\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(activeUser.docId)\r\n        .update({\r\n          chat_friends: [...activeUser.chat_friends, user_uid],\r\n        });\r\n\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(activeUser.docId)\r\n        .update({\r\n          chatUrl: messageUrl,\r\n        });\r\n\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(friendUser.docId)\r\n        .update({\r\n          chat_friends: [...friendUser.chat_friends, activeUser.userId],\r\n        });\r\n\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"users\")\r\n        .doc(friendUser.docId)\r\n        .update({\r\n          chatUrl: messageUrlOne,\r\n        });\r\n\r\n      await firebase\r\n        .firestore()\r\n        .collection(\"chat\")\r\n        .doc(\"allchatCollection\")\r\n        .collection(chat_id)\r\n\r\n        .add({\r\n          message_sender: activeUser.username,\r\n          message: text,\r\n          timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message_sender_uid: activeUser.userId,\r\n          senderpic: activeUser.profile_photo,\r\n        });\r\n      setIsChatFriend(true);\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  console.log(chat);\r\n  return activeUser && friendUser ? (\r\n    <div className=\"chatMessage\" style={{overflow:'scroll',height:'70vh'}}>\r\n      {chat\r\n        ? chat.map((chat) => (\r\n            <ChatShow chat={chat.data} key={chat.id} activeUser={activeUser} />\r\n          ))\r\n        : null}\r\n\r\n      <div\r\n        className=\"chatMessageInput\"\r\n        style={{\r\n          display: \"flex\",\r\n          // marginTop: \"auto\",\r\n          position: \"absolute\",\r\n          bottom: -5,\r\n          width: \"67%\",\r\n          objectFit: \"contain\",\r\n          backgroundColor: \"#f5f4f2\",\r\n        }}\r\n      >\r\n        <InputEmoji\r\n          value={text}\r\n          onChange={setText}\r\n          cleanOnEnter\r\n          onEnter={handleOnEnter}\r\n          placeholder=\"Type a message\"\r\n        />\r\n        <Button onClick={handleOnEnter} disabled={!text.trim()}>\r\n          {\" \"}\r\n          Send\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <h5>Loading</h5>\r\n  );\r\n}\r\n\r\nexport default ChatMessage;\r\n"]},"metadata":{},"sourceType":"module"}