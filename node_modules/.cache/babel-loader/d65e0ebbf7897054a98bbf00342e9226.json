{"ast":null,"code":"import { db, auth } from \"../firebase\";\nimport firebase from \"firebase\";\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.map(user => user.data().length > 0);\n}\nexport async function findActiveUser(uid) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", uid).get();\n  const activeUser = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  })); // console.log(\"acitve\", activeUser);\n\n  return activeUser;\n}\nexport async function profileUser(uid) {\n  // console.log(\"hi\");\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", uid).get();\n  const profileuser = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  })); // console.log(user[0].emailAddress);\n\n  return profileuser;\n}\nexport async function MyPosts(uid) {\n  const result = await firebase.firestore().collection(\"photos\").where(\"user_uid\", \"==\", uid).get();\n  const posts = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  }));\n  return posts;\n}\n_c = MyPosts;\nexport async function LikedPosts(uid) {\n  const result = await firebase.firestore().collection(\"photos\").where(\"liked\", \"array-contains\", uid).get();\n  const posts = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  }));\n  return posts;\n}\n_c2 = LikedPosts;\nexport async function AllPosts() {\n  const result = await firebase.firestore().collection(\"photos\").get();\n  const posts = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  }));\n  return posts;\n}\n_c3 = AllPosts;\nexport async function getFollowingProfile(following) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"in\", following).get();\n  const followingUser = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  })); // console.log(\"ok\", followingUser);\n\n  return followingUser;\n}\nexport async function getAllPosts(following) {\n  // console.log(following);\n  const result = await firebase.firestore().collection(\"photos\").where(\"user_uid\", \"in\", following) // .orderBy(\"timestamp\", \"desc\")\n  .get();\n  const allPosts = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  }));\n  return allPosts;\n}\nexport async function getSuggestedProfile(following) {\n  const result = await firebase.firestore().collection(\"users\").limit().where(\"userId\", \"not-in\", following) // .orderBy(\"timestamp\", \"desc\")\n  .get();\n  const allProfile = result.docs.map(item => ({ ...item.data(),\n    postId: item.id\n  }));\n  return allProfile;\n}\nexport async function getIndivisualPost(postId) {\n  const response = await firebase.firestore().collection(\"photos\").doc(postId);\n  return response;\n}\nexport async function getAllPostComment(postId) {\n  const response = await firebase.firestore().collection(\"photos\").doc(postId).collection(\"comments\").orderBy(\"timestamp\", \"desc\");\n  return response;\n}\nexport async function updateLoggedInUserFollowing(loggedInUserDocId, profileId, isFollowingProfile, following) {\n  return firebase.firestore().collection(\"users\").doc(loggedInUserDocId).update({\n    following: isFollowingProfile ? following.arrayRemove(profileId) : following.arrayUnion(profileId)\n  });\n}\nexport async function updateFollowedUserFollowers(spdocId, loggedInUserDocId, isFollowerProfile, follower) {\n  return firebase.firestore().collection(\"users\").doc(spdocId).update({\n    follower: isFollowerProfile ? follower.arrayRemove(loggedInUserDocId) : follower.arrayUnion(loggedInUserDocId)\n  });\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MyPosts\");\n$RefreshReg$(_c2, \"LikedPosts\");\n$RefreshReg$(_c3, \"AllPosts\");","map":{"version":3,"sources":["G:/projects/photogram/src/services/firebase.js"],"names":["db","auth","firebase","doesUsernameExist","username","result","firestore","collection","where","get","docs","map","user","data","length","findActiveUser","uid","activeUser","item","docId","id","profileUser","profileuser","MyPosts","posts","postId","LikedPosts","AllPosts","getFollowingProfile","following","followingUser","getAllPosts","allPosts","getSuggestedProfile","limit","allProfile","getIndivisualPost","response","doc","getAllPostComment","orderBy","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","update","arrayRemove","arrayUnion","updateFollowedUserFollowers","spdocId","isFollowerProfile","follower"],"mappings":"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","sourcesContent":["import { db, auth } from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nexport async function doesUsernameExist(username) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"username\", \"==\", username)\r\n    .get();\r\n\r\n  return result.docs.map((user) => user.data().length > 0);\r\n}\r\n\r\nexport async function findActiveUser(uid) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"userId\", \"==\", uid)\r\n    .get();\r\n\r\n  const activeUser = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n\r\n  // console.log(\"acitve\", activeUser);\r\n\r\n  return activeUser;\r\n}\r\n\r\nexport async function profileUser(uid) {\r\n  // console.log(\"hi\");\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"userId\", \"==\", uid)\r\n    .get();\r\n  const profileuser = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n\r\n  // console.log(user[0].emailAddress);\r\n  return profileuser;\r\n}\r\n\r\nexport async function MyPosts(uid) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .where(\"user_uid\", \"==\", uid)\r\n    .get();\r\n  const posts = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n\r\n  return posts;\r\n}\r\n\r\nexport async function LikedPosts(uid) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .where(\"liked\", \"array-contains\", uid)\r\n    .get();\r\n\r\n  const posts = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n\r\n  return posts;\r\n}\r\n\r\nexport async function AllPosts() {\r\n  const result = await firebase.firestore().collection(\"photos\").get();\r\n\r\n  const posts = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n\r\n  return posts;\r\n}\r\n\r\nexport async function getFollowingProfile(following) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"userId\", \"in\", following)\r\n    .get();\r\n  const followingUser = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n  // console.log(\"ok\", followingUser);\r\n  return followingUser;\r\n}\r\n\r\nexport async function getAllPosts(following) {\r\n  // console.log(following);\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .where(\"user_uid\", \"in\", following)\r\n    // .orderBy(\"timestamp\", \"desc\")\r\n    .get();\r\n\r\n  const allPosts = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n  return allPosts;\r\n}\r\n\r\nexport async function getSuggestedProfile(following) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .limit()\r\n    .where(\"userId\", \"not-in\", following)\r\n    // .orderBy(\"timestamp\", \"desc\")\r\n    .get();\r\n\r\n  const allProfile = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    postId: item.id,\r\n  }));\r\n  return allProfile;\r\n}\r\n\r\nexport async function getIndivisualPost(postId) {\r\n  const response = await firebase.firestore().collection(\"photos\").doc(postId);\r\n\r\n  return response;\r\n}\r\n\r\nexport async function getAllPostComment(postId) {\r\n  const response = await firebase\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .doc(postId)\r\n    .collection(\"comments\")\r\n  .orderBy(\"timestamp\", \"desc\");\r\n  return response;\r\n}\r\n\r\n\r\nexport async function updateLoggedInUserFollowing(\r\n  loggedInUserDocId,\r\n  profileId,\r\n  isFollowingProfile,\r\n  following\r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .doc(loggedInUserDocId)\r\n    .update({\r\n      following: isFollowingProfile\r\n        ? following.arrayRemove(profileId)\r\n        : following.arrayUnion(profileId),\r\n    });\r\n}\r\n\r\n\r\nexport async function updateFollowedUserFollowers(\r\n  spdocId,\r\n  loggedInUserDocId,\r\n  isFollowerProfile,\r\n  follower\r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .doc(spdocId)\r\n    .update({\r\n      follower: isFollowerProfile\r\n        ? follower.arrayRemove(loggedInUserDocId)\r\n        : follower.arrayUnion(loggedInUserDocId),\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}